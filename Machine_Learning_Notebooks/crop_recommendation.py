# -*- coding: utf-8 -*-
"""Crop Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GLJt8anwB-xHI88UbOmgr5Xzpf0sJTRP
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.figure_factory as ff
import plotly.express as px
import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv('/content/drive/MyDrive/Colab work/Crop_recommendation.csv')

data.head()

data.size

data.columns

data.isnull().sum()

data.nunique()

data.corr()

"""# **MODEL BUILDING**"""

pip install --upgrade scikit-learn

from sklearn.model_selection import train_test_split
#from sklearn.metrics.ConfusionMatrixDisplay import plot_confusion_matrix
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report

x = data.drop(['label'], axis=1)
y = data.label

x_train, x_test, y_train,y_test = train_test_split(x,y,test_size=0.10,random_state=10)

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
model1 = LogisticRegression()
model2 = RandomForestClassifier()

model1.fit(x_train,y_train)

model1.predict(x_test)

model1.score(x_test, y_test)

model2.fit(x_train,y_train)

model2.predict(x_test)

model2.score(x_test, y_test)

def plot_confusion_matrix(y_true, y_pred, classes,
                          normalize=False,
                          title=None,
                          cmap=plt.cm.Blues):

y_pred = model1.predict(x_test)

# Calculate the confusion matrix
conf_matrix = confusion_matrix(y_true=y_test, y_pred=y_pred)
# Print the confusion matrix using Matplotlib

fig, ax = plt.subplots(figsize=(5, 5))
ax.matshow(conf_matrix, cmap=plt.cm.Oranges, alpha=0.3)
for a in range(conf_matrix.shape[0]):
    for b in range(conf_matrix.shape[1]):
        ax.text(x=b, y=a, s=conf_matrix[a, b], va='center', ha='center', size='xx-large')
 
plt.xlabel('Predictions', fontsize=18)
plt.ylabel('Actuals', fontsize=18)
plt.title('Confusion Matrix', fontsize=18)
plt.show()

matrix1 = classification_report(y_test, y_pred)
print("Classiffication reports : \n\n", matrix1)

"""

```
# pickle.dump(rfr, open('D:/Downloads/wheat_price_prediction.pkl', "wb"))
```

"""